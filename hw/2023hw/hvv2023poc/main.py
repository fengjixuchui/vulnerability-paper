import yaml
import requests
import os,sys
import re
import queue,threading
import argparse
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)




def xiao_hei_zi():
    print("2023-hvv-poc-part-tools")
    print("author:小黑子")
    print("use:python xiaoheizi.py -h")

def start_poc():

    while not q.empty():
        url=q.get()
        for root, dirs, files in os.walk("./poc"):
            for yaml_file in files:
                if "yaml" not in yaml_file:
                    continue
                with open("./poc/" + yaml_file) as f:
                    elem_locators = yaml.safe_load(f)
                allow_redirects = True
                try:
                    if elem_locators['rules']['r0']['request']['method'] == "POST":
                        try:
                            allow_redirects = elem_locators['rules']['r0']['request']['allow_redirects']
                        except:
                            pass
                        path = elem_locators['rules']['r0']['request']['path']
                        data = elem_locators['rules']['r0']['request']['body']
                        headers = elem_locators['rules']['r0']['request']['headers']
                        matcher = elem_locators['rules']['r0']['matcher']
                        res = requests.post(url=url + path, headers=headers, data=data, verify=False, timeout=timeout,
                                            allow_redirects=allow_redirects,proxies=proxies)
                        try:
                            r0_post_result = eval(matcher)
                            if r0_post_result:
                                info = elem_locators['info']['name']
                                print(f"{url.ljust(30)[:30]} | {info}")
                        except:
                            pass

                    # get
                    if elem_locators['rules']['r0']['request']['method'] == "GET":
                        matcher = elem_locators['rules']['r0']['matcher']
                        path = elem_locators['rules']['r0']['request']['path']
                        headers = elem_locators['rules']['r0']['request']['headers']
                        res = requests.get(url=url + path, headers=headers, verify=False, timeout=timeout,proxies=proxies)
                        try:
                            r0_get_result = eval(matcher)
                            if r0_get_result:
                                if "Set-Cookie" not in matcher:
                                    info = elem_locators['info']['name']
                                    print(f"{url.ljust(30)[:30]} | {info}")
                        except:
                            pass
                    try:
                        if elem_locators['rules']['r1']['request']['method'] == "GET":
                            path = elem_locators['rules']['r1']['request']['path']
                            headers = elem_locators['rules']['r1']['request']['headers']
                            cookie = elem_locators['rules']['r1']['request']['cookie']
                            if cookie:
                                headers['Cookie'] = r0_get_result
                            res = requests.get(url=url + path, headers=headers, verify=False, timeout=timeout,proxies=proxies)
                            matcher = elem_locators['rules']['r1']['request']['matcher']
                            sb = eval(matcher)
                            if sb:
                                info = elem_locators['info']['name']
                                print(f"{url.ljust(30)[:30]} | {info}")
                    except:
                        pass
                except:
                    pass

if __name__ == '__main__':
    if len(sys.argv)==1:
        xiao_hei_zi()
        exit()
    r0_get_result = ''
    r0_post_result = ''
    proxies={}
    q=queue.Queue()
    parser = argparse.ArgumentParser(description='2023-hvv-poc-part-tools help')
    parser.add_argument("-t", "--threading", help="threading",default='')
    parser.add_argument("-u", "--url", help="url",default='')
    parser.add_argument("-f", "--file", help="file url",default='')
    parser.add_argument("-p", "--proxy", help="agent", default='')
    parser.add_argument("-e", "--timeout", help="timeout", default='')
    args = parser.parse_args()
    # 代理
    pr=args.proxy
    if pr !="":
        proxies = {'http': f'http://{pr}', 'https': f'https://{pr}'}
    #超时
    timeout=5
    tout=args.timeout
    if tout !="":
        timeout=int(tout)
    th =args.threading
    if th =='':
        th=1
    file=args.file
    url=args.url
    if url !='':
        q.put(url)
        start_poc()
    if file !='':
        f=open(file)
        for ip in f:
            ip_h="".join(ip.split())
            if 'http' not in ip_h:
                ip_h="http://"+ip_h
            q.put(ip_h)
        thread_list = []
        for i in range(int(th)):
            t = threading.Thread(target=start_poc)
            thread_list.append(t)
        for t in thread_list:
            t.setDaemon(True)
            t.start()
        for t in thread_list:
            t.join()